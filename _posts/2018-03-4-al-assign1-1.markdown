---
layout: post
title:  "Find words-2"
subtitle:   "Find words-2"
categories: devlog
tags: al
---

# 모두 탐색하기 
---
문제는 이전 게시글에서 확인하자.  

[Finding Word](https://bleetoteelb.github.io/devlog/2018/03/01/oop-assign1/)  

이 게시글은 모두 탐색에 대해서 코드를 포함한 상세한 설명을 할 것이다.  
코드는 내가 2년전에 짰던 코드이다.

**본문에 활용된 코드는 참고용일 뿐이며,**  
**코드를 그대로 가져다 쓰는 멍청한 짓은 하지 않길 바란다.**  

나보다 훨씬 똑똑한 수많은 사람들이  
나보다 더 좋은 방법들을 사용해서 문제를 해결할 것이다.
단지 이 글은,  
_'난 이렇게 했었는데 한 번 읽어나보시지'_ 정도의 의미로 정리하는 글이다.




### 전략
---
cin(혹은 getline)을 통해 row와 column을 저장하는 방법은  
c++의 기초 중 기초이므로 생략하도록 하겠다.  

다만,   
나는 첫 숫자와 row, column은 int로 받고,  
alphabets라는 char 2차원 행렬을 만들어 grid를 받았다.  


이후에 word를 처리하는 방법이 2가지가 일단 떠오르는데,  
>1. word를 한꺼번에 받고 grid 한칸당 4번씩 탐색한다.
>2. word를 받을때마다 한번씩 grid를 탐색한다.

나는 **두번째 방법**으로 하겠다.  
첫번째 방법으로 하면,  
이미 찾은 word에 대한 처리가 약간 들어가야 해서 귀찮을 것 같아서이다.  

코드의 효율은 여기서 따지지 않겠다.  




### 대소문자 처리
---
이 문제에서 어떤 input이던  
받은 다음에 가장 먼저 해줘야 할 일이 대소문자 변경이다.  

구글에 *'c++ lowercase change'*와 같은 문구로  
검색하면 수많은 글이 검색될것이다.

그 중 아스키 코드를 이용한 무난한 방법을 이용하자.

char에 저장된 알파벳의  
대문자 'A~Z'는 '65~90'에,  
소문자 'a~z'는 '97~122'에 배정되어 있다.  
[아스키코드 참고](https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C)  


모든 문자를 소문자로 바꾸어 보자.
```c++
// word에 저장되어 있는 알파벳을 모두 소문자로 바꾼다.
// word는 char타입 배열인데 단어의 맨 마지막엔 '\n'을 두어 마지막을 표시한다.
for(int k=0;word[k]!='\n';k++) {
    number=k;
    if(word[k]>=65&&word[k]<=90)
        word[k]=word[k]+32;
}
```





### 탐색하기
---
여기서부턴 사실 노가다이다.

![first](https://bleetoteelb.github.io/assets/img/first_method.JPG)

저번글에 언급했던 것과 같이,  
다음 그림과 깉이 8방향을 탐색할것이고   
각 방향에 대한 호칭은 반시계방향으로  
동,동북,북,북서,서,서남,남,남동 으로 표시하겠다.  

탐색을 recursive로 해도 되고,  
귀찮으면 for문으로 하자.  

난 for문으로 떡칠할 것이다.  


8방향에 대해 모두 탐색을 해야 하므로,  
큰 for문과 작은 for문 8개가 들어간다.  
이를 간소화 해보면, 다음과 같다.  

```
for(grid 처음부터 끝까지 순차적으로 진행){
	for(해당 칸에서 동 방향)
	for(해당 칸에서 동북 방향)
	for(해당 칸에서 북 방향)
	for(해당 칸에서 북서 방향)
	for(해당 칸에서 서 방향)
	for(해당 칸에서 서남 방향)
	for(해당 칸에서 남 방향)
	for(해당 칸에서 남동 방향)
}
```


큰 for문에서 순차적으로 진행할 때 8방향의 중심을 가리킬 변수가 필요하다.  
난 다음과 같이 했다.


```c++
int rowcount=0, columncount=0;
```


8방향의 코드를 모두 옮기지는 않겠다.  
일단 동쪽 방향 탐색 코드만 확인해보자.  

```c++
for(int R=rowcount, C=columncount, a=0;determine!=2;a++) {
	if(R>=row || R<0 || C>=column || C<0) break;
	if(word[a]==alphabets[R][C]&&a+1==number) {
		determine=2;
		storage[t][0]=rowcount+1;
		storage[t][1]=columncount+1;
		break;
	}else if(word[a]==alphabets[R][C]&&a+1<number) {
		determine=1;
		C++;
		continue;
	}else break;
}
if(determine==2) break;
else determine=0;
```


>storage : 각 word가 발견되었을때 제일 첫 글자의 위치를 저장하는 2차원배열   
>number : word의 길이  
>R/C : 탐색을 하는 방향으로 변하는 좌표
>determine : 발견 여부나 탐색 상태를 나타내는 변수. 
>0은 발견 안 됨, 1은 탐색중, 2는 발견됨. bool로 탐색중을 빼고 true/false만 체크해도 된다.


R과 C는 해당 칸을 중심으로 오른쪽방향으로 word와 알파벳을 대조할 것이다.  
![rc_description](https://bleetoteelb.github.io/assets/img/rc_description.JPG)
rowcount와 columncount는 8방향에 대한 탐색이 끝난 후 한 칸 옮길때만 변한다.


>1. 만약 칸의 알파벳과 alphabets의 알파벳이 같고  
>탐색한양(a+1;a는 0부터 시작이므로)가 word의 길이(number)와 같다면  
>발견된 것으로 판단한다.  
>
>발견되면 storage에 위치를 저장하고  
>determine 상태를 2로 바꾸어 발견되었음을 표시한다.
>
>2. 그렇지 않고 칸의 알파벳과 alphabets의 알파벳이 같고  
>탐색한 양과 word의 길이가 다르다면  
>아직 탐색중인 것으로 판단한다.  
>아직 탐색중이라면 나아가는 방향으로 R과 C를 증가/감소시키고  
>determine 상태를 1로 바꾸어 탐색중임을 표시한다.
>
>3. 그 외의 경우는 알파벳이 같지 않은 경우이므로  
>break로 for문을 벗어난다.

determine의 상태가 2라면 발견되었으니  
이 word에 대한 탐색을 종료한다.

그렇지 않다면 상태를 0으로 바꾸고  
for문을 처음부터 다시 돌게 하면 된다.  

R과 C가 grid의 범위를 벗어나는 상황은  
for문 맨 처음에 if문으로 예외처리를 할 수 있다.




### 최적화
---

2년전의 나는 이 for문을 8개를 썼지만,  
코드를 더 간단히 만드는 방법은 얼마든지 있다.  

다른 방향으로의 탐색에서 결국 변하는 부분은  
탐색 중일때 *나아가는 방향*,  
즉, *R/C의 증가시키거나 감소시키는 부분* 뿐이다.  

그래서 이번에 다음과 같이 바꿔보았다.


```c++
int dir[8][2] = { {0,1},{-1,1},{-1,0},{-1,-1},{0,-1},{1,-1},{1,0},{1,1} };
for(int m=0;m<8;m++){
	for(int R=rowcount, C=columncount, a=0;determine!=2;a++) {
		if(R>=row || R<0 || C>=column || C<0) break;
		if(word[a]==alphabets[R][C]&&a+1==number) {
			determine=2;
			storage[t][0]=rowcount+1;
			storage[t][1]=columncount+1;
			break;
		}else if(word[a]==alphabets[R][C]&&a+1<number) {
			determine=1;
			R+=dir[m][0];
			C+=dir[m][1];
			continue;
		}else break;
	}
	if(determine==2) break;
	else determine=0;
}
```


방향을 저장한 배열 dir에 방향을 저장하고  
R/C에 각 배열의 요소를 더해주기만 하면 8개의 for문을 만들지 않아도 될 것이다.  

고쳐서 실행해보니 아주 잘 된다.

2년 전의 나는 하드코딩으로 답을 내는데 급급했었나보다...



### 마치며
---
사실 이부분 말고도 최적화 할 곳이 몇군데 더 보이긴 하지만,
이 문제는 이 정도로만 해두려고 한다.


문제를 푸는데 필요한 핵심 알고리즘은 모두 설명했다.
나머지 자잘한 부분은 어렵지 않으니  
직접 해결해 보길 바란다.  


추가적인 테스트셋은 이전 글에 있으니 활용해보라.





