---
layout: post
title:  "Follow instruction"
subtitle:   "Follow instruction"
categories: devlog
tags: oop
---


이 문제 역시 저번 문제와 마찬가지로    
 _"Programming Challenges: The Programming Contest Training Manual"_  
이라는 책에 나오는 문제이다.  

이미 정답 코드도 인터넷에 있다.  
[정답코드](https://codingstrife.wordpress.com/2013/07/12/solution-uva10033-pc110106-interpreter/)
바로 정답을 알고 싶다면 바로 위 링크에 있는 내용으로 해결하길 바란다.  




설명이 너무 짧아서 한 번 읽어서는   
문제를 온전히 이해하기 어려울 것이다.   

그러나 이 글을 잘 따라가다보면 금방 이해될것이라 생각한다.

---



# 1. 문제 

## 1-1. 설명

어떤 컴퓨터는 10개의 register와 1000개 단어를 저장하는 RAM으로 구성되어 있다.  
각 register와 RAM의 위치는 0~999에 할당되어 있다.  
Instruction은 RAM에 다음과 같은 3자리 정수로 저장된다.  

>100 : 중단하라.  
>2dn : 'register d'에 숫자 'n'을 넣어라.(n은 0~9)  
>3dn : 'register d'에 숫자 'n'을 더해라.  
>4dn : 'register d'에 숫자 'n'을 곱해라.  
>5ds : 'register d'에 숫자 's'의 값을 넣어라.  
>6ds : 'register d'에 'register s'의 값을 더해라.  
>7ds : 'register d'의 값에 'register s'의 값을 곱해라.  
>8da : 'register a'를 주소로 하는 RAM의 값을 'register d'에 넣어라.  
>9sa : 'register s'의 값을 'register a'를 주소로 하는 RAM의 값으로 넣어라.  
>0ds : 'register s'이 0이 아니라면 'register d'의 위치로 가라.  

## 1-2. 조건
1. 각 input은 1000개의 unsigned integer로 구성되어 있다.(0~999)
2. 모든 RAM은 000으로 초기화 되어있다.
3. 모든 결과값은 modulo 1000으로 계산한다. (1000으로 나눈 나머지)

## 1-3. 입력
```
1

299
492
495
399
492
495
399
283
279
689
078
100
000
000
000
```

## 1-4. 출력
```
16
```



---
# 2. 해제

사실 저렇게 보면 무슨 소린지 모를것이다.  

실제 입력값을 실제로 시행하면서 설명하겠다.  

**1. 초기**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|000|  

실행이 되기 전 처음 상태이다.
모든 값은 000으로 초기화 되어있다.


 
**2. 명령: 299**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|009|  

>2dn : 'register d'에 숫자 'n'을 넣어라.  

의 명령에 따라, 'register 9'에 '9'를 넣었다.  



**3. 명령: 492**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|018|  
 
>4dn : 'register d'에 숫자 'n'을 곱해라.  

의 명령에 따라, 'register 9'에 '2'를 곱했다.  



**4. 명령: 495**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|090|  

'register 9'에 '5'를 곱했다.  



**5. 명령: 399**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|099|  

>3dn : 'register d'에 숫자 'n'을 더해라.   

의 명령에 따라 'register 9'에 9를 더했다.  



**6. 명령: 492**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|198|

'register 9'에 '2'를 곱했다.  



**7. 명령: 495**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|990|  

'register 9'에 '5'를 곱했다.  



**8. 명령: 399**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|000|999|  

'register 9'에 9를 더했다.  



**9. 명령: 283**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|000|003|999|  

'register 8'에 '3'를 넣었다.  



**10. 명령: 279**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|003|999|  

'register 7'에 '9'를 넣었다.  



**11. 명령: 689**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|002|999|  

>6ds : 'register d'에 'register s'의 값을 더해라.  

의 명령에 따라 'register 8'에 'register 9'의 값을 더했다.



**12. 명령: 078**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|002|999|  

>0ds : 'register s'이 0이 아니라면 'register d'의 위치로 가라.  

의 룰에 따라 'register 8'이 0이 아니어서 'register 7'값(9)을 RAM 주소값으로 갖는 장소로(689) 갔다.  



**13. 명령: 689**   
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|001|999|  

'register 8'에 'register 9'의 값을 더했다.  



**14. 명령: 078**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|001|999|  


078를 넣으면 위와 같이 변한다.  
'register 8'이 0이 아니어서 'register 7'값(9)을 RAM 주소값으로 갖는 장소로(689) 갔다. 



**15. 명령: 689**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|000|999|  


689를 넣으면 위와 같이 변한다.
'register 8'에 'register 9'의 값을 더했다.  



**16. 명령: 078**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|000|999|  

이번에는 'register 8'이 0이어서 다음 명령으로 이동했다.

다음명령은 100 이므로 중단한다.


따라서 이 input에 따라 시행한 instruction의 개수는 16이다.(100 포함)


---

위 input에서 사용되지 않은 7,8,9를 예시와 함께 설명해보겠다.  

| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|004|999|  
위 상태에서 출발하여

778을 넣으면  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|036|004|999| 
와 같이 될 것이다.
>7ds : 'register d'의 값에 'register s'의 값을 곱해라.  

의 명령에 따라, 'register 7'의 값에 'register 8'의 값을 곱했다.  


**다시,**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|004|999|  
**RAM[4]:342**  
위 상태에서 출발하여  

828을 넣으면  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|342|000|000|000|000|009|004|999|  
와 같이 될 것이다.  
>8da : 'register a'를 주소로 하는 RAM의 값을 'register d'에 넣어라.  

의 명령에 따라, 'register 8'를(4) 주소로 하는 RAM의 값(342)을 'register 2'에 넣었다.  


**다시,**  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|004|999|  
**RAM[4]:342**  
위 상태에서 출발하여

998을 넣으면  
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
|---
|000|000|000|000|000|000|000|009|004|999|  
**RAM[4]:999**  
와 같이 될 것이다.
>9sa : 'register s'의 값을 'register a'를 주소로 하는 RAM의 값으로 넣어라.  

의 명령에 따라, 'register 9'의 값(999)을 'register 8'을(4) 주소로 하는 RAM의 값으로 넣었다.  

# 더 알아보기

이 문제는 어셈블리 프로그래밍에 기인한 문제이다.  
(물론 좀 더 원초적으로는 기계어.)

학과 과정을 계속 공부하다보면 "어셈블리 언어"에대해  
공부할 기회가 있을텐데,(대표적으로 _System programming_)
실제 다음 그림과 같이 생겼다.
![asm_code](https://bleetoteelb.github.io/assets/img/asm_code.png)  

Assembly language는 기계어와 일대일 대응이 되는 컴퓨터 프로그래밍 저급 언어이다.  
우리가 지금 사용하는 C++ 언어를 기계는 '컴파일러'를 통해 기계어로 변환한다.  
기계어는 이미 알고 있듯이 0과1로만 이루어진 언어이다.  
어셈블리어는 C++과 기계어 중간단계쯤 이라고 생각하면 이해하기 쉽다.  



사진에서 볼 수 있듯이 **movl, addl, jge** 등등   
실제로는 이 문제에서 쓰인 10개의 명령어보다 훨씬 많은 instruction이 있다.  
![asm_basic](https://bleetoteelb.github.io/assets/img/asm_basic.JPG)
[출처](http://aistories.tistory.com/12)

**eax, ebp**등과 같이 쓰인 것은 모두 register들이다.  
마찬가지로 위에 쓰인 10개보다 훨씬 많은 register가 있다.  
(32bit냐 64bit냐에 따라 그 개수가 달라진다.)    

자세한 내용은 실제 수업에서 공부할것이다.  
그 내용을 간소화 하여 개념을 맛보게 해주었다는 면에서  
비록 쉬운 문제였지만, 교육적 의미가 있다고 생각한다.  

#  추가 테스트 예제

1




