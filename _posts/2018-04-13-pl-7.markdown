---
layout: post
title:  "Programming Language 7"
subtitle:   "Programming Language 7"
categories: devlog
tags: pl
---

# 1. First-class functions(일급 객체 함수) 

다음과 같은 조건을 만족할 때 **일급 객체**라고 말할 수 있다.  
- **변수**나 **데이터 구조**안에 담을 수 있다.  
- **파라미터__로 전달 할 수 있다.  
- **반환값(return value)**으로 사용할 수 있다.  
- 할당에 사용된 이름과 관계없이 **고유한 구별**이 가능하다.  

  

쉽게말해,  
**First-class function**은 어디에서나 value로 사용될 수 있는 함수를 말한다.   
다음 예제를 보자.

```haskell
fun double x = 2*x 
fun incr x = x+1 
val a_tuple = (double,incr,double(incr 7)) 
```

위 예제에서 a_tuple이라는 변수에 double과 incr라는 함수를 원소로 갖는 tuple을 binding했다. 

그러나 이러한 방식보다 **First-class function**은 argument로 훨씬 많이 쓰인다.  
**First-class function**을 argument로 사용하는 함수들은 **Higher-order function**이 된다.  
이러한 방법은 일반적인 기능을 뽑아내는 강력한 방법이 된다. 

Function을 argument로 사용하는 예는 다음과 같다. 
```haskell
fun f (g,a) = g a 
fun h1 a = a+1 
fun h2 a = a*2 


val d = f(h1,3) 
val e = f(h2,3) 
```

결과는 
```haskell
val f = fn : ('a -> 'b) * 'a -> 'b 
val h1 = fn : int -> int 
val h2 = fn : int -> int 
val d = 4 : int 
val e = 6 : int 
```


# 2. Function Closure 

**Closure**는 **First-class functions**의 개념을 이용하여 scoope에 묶인 변수를 binding하기 위한 일종의 기술이다.   

**Closure**는 함수를 저장한 record이며,  
scope의 인수들은 **closure**가 만들어질 때 정의되고,  
scope 내의 영역이 소멸 되었어도 그에 대한 접근은 독립된 복사본인 **Closure**를 통해 이루어질 수 있다. 

다음 예제를 보자.
```haskell
fun start x = 
    let fun inner y = y+x 
    in inner
    end 
    
val a = start 
val b = start 3 
val c = b 3 
```

결과는 다음과 같다.
```haskell
val start = fn : int -> int -> int 
val a = fn : int -> int -> int 
val b = fn : int -> int 
val c = 6 : int 
```

*a*는 *start* 함수를 binding 한 상태이고  
*b*는 *start* 함수의 argument인 x에 3을 binding한 상태이다.  

즉, *b*는 다음과 같은 함수이다.  
```haskell
fun inner y = y+3 
```
따라서 *b 3* 은 6이 된다. 

이렇게 *start*라는 함수가 return값을 반환하면서 소멸했더라도 (environment에는 당연히 남아있다.)  
그 안의 *inner*함수의 복사본인 **Closure**를 통해 *b* 3을 계산할 수 있다는 것이다. 



# 3. Polymorphism and higher-order functions 

이러한 함수의 특성을 활용하여 **Higher-order functions**을 만들다보면  
이들은 "*generic*"하고 "*reusable*"하기 때문에 **polymorphic type**을 갖게 된다. 

먼저 다음 함수들을 보자. 

```haskell
fun increment_n_times_lame(n,x) = 
    if n=0 
    then x 
    else 1 + increment_n_times_lame(n-1,x) 

fun double_n_times_lame (n,x) = 
    if n=0 
    then x 
    else 2 * double_n_times_lame(n-1,x) 

fun nth_tail_lame (n,xs) = 
    if n=0 
    then xs 
    else tl (nth_tail_lame(n-1,xs)) 

fun concat_n_times_lame (n,xs) = 
    if n=0 
    then xs 
    else n::concat_n_times_lame(n-1,xs) 

fun attatch_n_times_lame (n,s) = 
    if n=0 
    then s 
    else s^attatch_n_times_lame(n-1,s) 
```

비슷한 역할을 하는 비슷한 구조의 함수들이다.  
이런 함수들이 필요할때마다 하나씩 만들기는 너무 번거롭고 공간만 차지한다.  

이 때 **polymorphism**을 이용하면 훨씬 간결하게 만들 수 있다.  

```haskell
fun n_times (f,n,x) = 
    if n=0 
    then x 
    else f(n_times(f,n-1,x)) 

fun increment x = x+1 
fun double x = x+x 
fun concat x = hd x::x 
fun attatch (x,y) = (x,x^y) 

val x1 = n_times(increment,4,7) 
val x2 = n_times(double,4,7) 
val x3 = n_times(tl,2,[4,8,12,16]) 
val x4 = n_times(concat,3,[3,4]) 
val x5 = #2 (n_times(attatch,5,("x",""))) 
```

결과는 다음과 같다. 
```haskell
val n_times = fn : ('a -> 'a) * int * 'a -> 'a 
val increment = fn : int -> int 
val double = fn : int -> int 
val concat = fn : 'a list -> 'a list 
val attatch = fn : string * string -> string * string 
val x1 = 11 : int 
val x2 = 112 : int 
val x3 = [12,16] : int list 
val x4 = [3,3,3,3,4] : int list 
val x5 = "xxxxx" : string 
```

이 때 *n_times*의 **Type**에 주목하자.  
** _ ('a → 'a) \* int \* 'a → 'a _  **

이 함수가 **polymorphic**인지 아닌지는 type을 분석해보면 알 수 있다.  
이 **polymorphic**의 성질이 *n_times*를 훨씬 유용하고 강력하게 만들어 줄것이다.  

실사용을 위해 함수화 시킨 전체 코드는 다음과 같다. 

```haskell
fun n_times (f,n,x) = 
    if n=0 
    then x 
    else f(n_times(f,n-1,x)) 

fun increment x = x+1 
fun double x = x+x 
fun concat x = hd x::x 
fun attatch (x,y) = (x,x^y) 

fun increment_n_times (n,x) = n_times(increment,n,x) 
fun double_n_times (n,x) = n_times(double,n,x) 
fun nth_tail (n,x) = n_times(tl,n,x) 
fun concat_n_times (n,x) = n_times(concat,n,x) 
fun attatch_n_times (n,x) = #2 (n_times(attatch,n,x)) 
```
이처럼 polymorphism을 강력한 도구이다. 

.

.

물론 모든 **Higher-order functions**가 모두 **Polymorphic**인것은 아니다. 
```haskell
fun times_until_zero (f,x) = 
    if x=0 
    then 0 
    else 1+times_until_zero(f,f x) 
```
위 함수는 **Higher-order function**이지만 **polymorphic**은 아니다.  
위 함수의 Type은 **_(int→int)\*int→int_** 이기 때문이다.  

반대로 **Polymorphic**이라고 모두 **Higher-order functions**인것도 아니다. 

```haskell
fun len xs = 
    case xs of 
        [] => 0 
      | _::xs' => 1+len xs' 
```
위 함수의 Type은 _'a list → int_ 이다. 


# 4. Anonymous functions 
한번의 사용을 위해 environment에 binding을 하는것은 매우 비효율적이다.  
예를들어 위에서 만들었던 n_times 함수를 쓰기 위해 다음과 같이 만들었다고 하자.  
```haskell
fun triple x = 3*x 
fun triple_n_times (n,x) = n_times(triple,n,x) 
```

*n_times*의 인자로 넘기기 위해 *triple* 함수를 binding할 필요는 없다.  
다음은 조금 더 개량된 형태이다 
```haskell
fun triple_n_times (n,x) = 
    let fun trip y = 3*y 
    in n_times(trip,n,x) 
    end 
```
.  
.  
이번엔 코드를 조금 줄여보자 
```haskell
fun triple_n_times (n,x) = 
    n_times(let fun trip y = 3*y in trip end, n, x) 
```

뭔가 좀 이상해 보인다.   
**Anonymous function**을 이용해 이상적인 함수를 만들어보면 다음과 같다. 
```haskell
fun triple_n_times (n,x) = 
    n_times((fn y => 3*y),n,x) 
```
.  
.  
```haskell
let fun trip y = 3*y in trip end 
```
이 코드가 
```haskell
fn y => 3*y 
```
이렇게 간결해졌다. 

그렇다고 인자로 fun trip y = 3\*y의 형태로 넘길수는 없다.  
위 표현은 function binding이기 때문이다.  

**Anonymous function**에서는 
함수 이름은 쓰지 않고 argument만 나열하며,  
fun 대신 fn을 쓰고, = 대신 =>를 쓴다.  
.  
.  

위에서 **Polymorphic**을 위해 사용했던 함수들을 **Anonymous function**의 형태로 바꾸는 연습을 해보자.   
꼭 직접 해보고 다음 정답을 보길 바란다. 
```haskell
fun increment_n_times2 (n,x) = 
    n_times((fn y => y+1),n,x) 

fun double_n_times2 (n,x) = 
    n_times((fn y => y+y),n,x) 

fun concat_n_times2 (n,x) = 
    n_times((fn y => hd y::y),n,x) 

fun attatch_n_times2 (n,x) = 
    #2 (n_times((fn (y,z) => (y,y^z)),n,x)) 
```

**Anonymous function**은 함수 이름이 없으므로 당연하게도 recursive에는 사용 할 수 없다.  
그런데 아이러니하게도 *fun binding*은 *(val binding + anonymous function)*의 **syntactic sugar**이다. 

```haskell
fun triple x = 3*x 
val triple = fn y => 3*y 
```


# 5. 몇 가지 유명한 함수 


- **Map**

```haskell
fun map (f,xs) = 
    case xs of 
        [] => [] 
      | x::xs' => (f x)::(map(f,xs')) 

val map : ('a->'b) * 'a list -> 'b list 
```

- **Filter**

```haskell
fun filter (f,xs) = 
    case xs of 
        [] => [] 
      | x::xs' => if f x then x:: (filter(f,xs')) else filter(f,xs') 
val filter : ('a -> bool) * 'a list -> 'a list 
```